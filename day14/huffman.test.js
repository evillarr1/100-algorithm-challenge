require("../extras");
let Huffman = require("./huffman");
let huffman = new Huffman();
let finalExpect;
let expect;

// Test 1
console.log(`${'-'.repeat(15)}TEST 1${'-'.repeat(15)}`);

result = JSON.stringify(huffman.createWeightMap('astala vista tasta'));
expect = JSON.stringify({"s": "00", "t": "01", " ": "100", "i": "1010", "l": "10110", "v": "10111", "a": "11"});
console.assert(result === expect, `FAILED - Expect ${result} to equal ${expect})`);

console.log("PASSED");

// Test 2
console.log(`${'-'.repeat(15)}TEST 2${'-'.repeat(15)}`);

result = huffman.compress('astala vista tasta');
expect = '73{"s":"00","t":"01"," ":"100","i":"1010","l":"10110","v":"10111","a":"11"}1100011110110111001011110100001111000111000111';
console.assert(result === expect, `FAILED - Expect ${result} to equal ${expect})`);

console.log("PASSED");

// Test 3
console.log(`${'-'.repeat(15)}TEST 3${'-'.repeat(15)}`);

result = huffman.decompress(expect);
expect = 'astala vista tasta';
console.assert(result === expect, `FAILED - Expect ${result} to equal ${expect})`);

console.log("PASSED");

// Test 4
console.log(`${'-'.repeat(15)}TEST 4${'-'.repeat(15)}`);

finalExpect = 'A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BEDAJSDLASDOQWPINECIPEC PW CIPEC PIAD CPIACX{OJC QWEPQWOEIQPUITREYTHKGDAJLAJKA:SJDNX<CNNZ<XNZ><XSJKDK:S      A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BEDAJSDLASDOQWPINECIPEC PW CIPEC PIAD CPIACX{OJC QWEPQWOEIQPUITREYTHKGDAJLAJKA:SJDNX<CNNZ<XNZ><XSJKDK:S';
result = huffman.compress(finalExpect);
expect = '363{"I":"0000","Q":"00010",">":"0001100","U":"0001101","{":"0001110","G":"0001111","K":"00100","T":"001010",":":"001011","P":"0011"," ":"0100","W":"01010","X":"01011","D":"011","A":"100","N":"10100","S":"10101","C":"1011","_":"1100","J":"11010","B":"11011","O":"111000","<":"111001","H":"1110100","Y":"11101010","R":"11101011","Z":"1110110","L":"1110111","E":"1111"}
console.assert(result === expect, `FAILED - Expect ${result} to equal ${expect})`);

result = huffman.decompress(expect);
console.assert(result === finalExpect, `FAILED - Expect ${result} to equal ${expect})`);

console.log("PASSED");

// Test 5
console.log(`${'-'.repeat(15)}TEST 5${'-'.repeat(15)}`);

finalExpect = 'BAD DECOMPRESS';
result = huffman.compress(finalExpect);
expect= '118{"S":"00","E":"010","D":"011","R":"1000"," ":"1001","C":"1010","B":"1011","O":"1100","M":"1101","P":"1110","A":"1111"}101111110111001011010101011001101111010000100000'
console.assert(result === expect, `FAILED - Expect ${result} to equal ${expect})`);

finalExpect = 'BAD DECOMPRES';
result = huffman.decompress(expect.slice(0, expect.length - 1));
console.assert(result === finalExpect, `FAILED - Expect ${result} to equal ${expect})`);

console.log("PASSED");
